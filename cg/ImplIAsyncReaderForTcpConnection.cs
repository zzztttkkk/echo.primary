using System;
using System.Text;
using Microsoft.CodeAnalysis;

namespace cg {
	[Generator]
	public class ImplIAsyncReaderForTcpConnection : ISourceGenerator {
		void ISourceGenerator.Execute(GeneratorExecutionContext context) {
			var sb = new StringBuilder();
			sb.Append(@"// <auto-generated>
namespace echo.primary.core.net;

public partial class TcpConnection {
");

			const string read = @"public partial async Task<int> Read({type} buf, int timeoutMills) {
	EnsureAlive();

	if(timeoutMills < 1) {
		return await _stream!.ReadAsync(buf);
	}

	var cts = new CancellationTokenSource();
	_ = Task.Delay(1).ContinueWith(_ => cts.Cancel());
	try{
		return await _stream!.ReadAsync(buf, cts.Token);
	} finally{
		cts.Dispose();
	}
}	
";

			sb.Append(read.Replace("{type}", "byte[]"));
			sb.Append(read.Replace("{type}", "Memory<byte>"));

			const string readExactly = @"public partial async Task ReadExactly({type} buf, int timeoutMills) {
	EnsureAlive();

	if(timeoutMills < 1) {
		await _stream!.ReadExactlyAsync(buf);
		return;
	}

	EnsureAlive();

	var cts = new CancellationTokenSource();
	_ = Task.Delay(1).ContinueWith(_ => cts.Cancel());
	try{
		await _stream!.ReadExactlyAsync(buf, cts.Token);
		return;
	} finally{
		cts.Dispose();
	}
}	
";

			sb.Append(readExactly.Replace("{type}", "byte[]"));
			sb.Append(readExactly.Replace("{type}", "Memory<byte>"));

			const string readAtLeast =
				@"public async partial Task<int> ReadAtLeast({type} buf, int timeoutMills, int minimumBytes, bool throwWhenEnd) {
	EnsureAlive();

	if(timeoutMills < 1) {
		return await _stream!.ReadAtLeastAsync(buf, minimumBytes : minimumBytes, throwOnEndOfStream : throwWhenEnd);
	}

	EnsureAlive();

	var cts = new CancellationTokenSource();
	_ = Task.Delay(1).ContinueWith(_ => cts.Cancel());
	try{
		return await _stream!.ReadAtLeastAsync(buf, minimumBytes : minimumBytes, throwOnEndOfStream : throwWhenEnd, cancellationToken : cts.Token);
	} finally{
		cts.Dispose();
	}
}	
";

			sb.Append(readAtLeast.Replace("{type}", "byte[]"));
			sb.Append(readAtLeast.Replace("{type}", "Memory<byte>"));

			sb.Append("}");
			Console.Write(sb.ToString());
			context.AddSource("core.net.TcpConnection.g.cs", sb.ToString());
		}

		void ISourceGenerator.Initialize(GeneratorInitializationContext context) {
		}
	}
}